<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- Main BOM file defines organization, licenses, developers, repositories,
         shared properties, dependency management, plugin management  -->
    <parent>
      <groupId>edu.utexas.tacc.tapis</groupId>
      <artifactId>tapis-bom</artifactId>
      <version>[1.11,2.0)</version>
      <!-- Set empty relative path to avoid maven warning and-->
      <!--   ensure parent is found in local repository if that-->
      <!--   is the only place it exists.-->
      <relativePath></relativePath>
    </parent>

    <artifactId>tapis-systems</artifactId>
    <version>0.0.1</version>
    <packaging>pom</packaging>

    <name>TACC Tapis Systems Parent POM</name>
    <description>Parent POM file for TAPIS Systems service</description>

    <scm>
        <connection>scm:git:https://github.com/tapis-project/tapis-systems.git</connection>
        <url>https://github.com/tapis-project/tapis-systems</url>
    </scm>

    <properties>
      <!-- Most properties set in parent tapis-bom   -->
      <!-- Properties can be overridden here         -->
      <!-- Individual projects may want to override. -->
      <!-- Skip integration tests by default -->
      <!-- Use mvn verify -DskipIntegrationTests=false to run integration tests -->
      <skipIntegrationTests>true</skipIntegrationTests>
    </properties>

  <build>
    <plugins>
      <!--  gitflow-maven-plugin supports various git workflow steps, such as gitflow:release-start-->
      <!--    gitflow:release-finish, gitflow:feature-start, gitflow:feature-finish-->
      <plugin>
        <groupId>com.amashchenko.maven.plugin</groupId>
        <artifactId>gitflow-maven-plugin</artifactId>
        <version>1.14.0</version>
        <configuration>
          <!-- false = disable git push for testing -->
          <pushRemote>true</pushRemote>
          <!-- true = print output of executed commands -->
          <verbose>true</verbose>
          <!-- true = include mvn clean install during execution -->
          <installProject>true</installProject>
          <gitFlowConfig>
            <!-- Branch that will hold the officially released versions and be the source for hotfixes  -->
            <productionBranch>main</productionBranch>
            <!-- Branch for development that will always have the latest -->
            <developmentBranch>dev</developmentBranch>
            <!-- Prefix when creating release branch. Format will be <prefix>X.Y.Z -->
            <releaseBranchPrefix>release/</releaseBranchPrefix>
          </gitFlowConfig>

          <!-- Full list of optional configuration settings (with defaults) -->
<!-- If desired run verify first -->
<!-- Execute mvn verify before release -->
<!--          <preReleaseGoals>verify</preReleaseGoals>-->
<!--          <preHotfixGoals>verify</preHotfixGoals>-->
<!--          <mvnExecutable>path_to_maven_executable</mvnExecutable>-->
<!--          <gitExecutable>path_to_git_executable</gitExecutable>-->
<!--          <installProject>false</installProject>-->
<!--          <verbose>false</verbose>-->
<!--          &lt;!&ndash; true = retain the release branch upon release-finish &ndash;&gt;-->
<!--          <keepBranch>false</keepBranch>-->
<!--          &lt;!&ndash; false = disable git push for testing &ndash;&gt;-->
<!--          <pushRemote>false</pushRemote>-->
<!--          <gitFlowConfig>-->
<!--            <productionBranch>master</productionBranch>-->
<!--            <developmentBranch>develop</developmentBranch>-->
<!--            <featureBranchPrefix>feature/</featureBranchPrefix>-->
<!--            <releaseBranchPrefix>release/</releaseBranchPrefix>-->
<!--            <hotfixBranchPrefix>hotfix/</hotfixBranchPrefix>-->
<!--            <supportBranchPrefix>support/</supportBranchPrefix>-->
<!--            <versionTagPrefix></versionTagPrefix>-->
<!--            <origin>origin</origin>-->
<!--          </gitFlowConfig>-->
          <commitMessages>
            <!-- since 1.2.1, see Customizing commit messages -->
          </commitMessages>
        </configuration>
      </plugin>
    </plugins>

    <resources>
      <!-- Write the project version number to the specified file. -->
      <!-- Setting the targetPath puts the file into the jar at the -->
      <!-- specified root-relative directory. The the modified -->
      <!-- tapis.version file is always copied to the target/classes -->
      <!-- directory. Do the same for other data that we want to -->
      <!-- capture. A jar and war file will contain these files -->
      <!-- as long as the templated files are in the configured -->
      <!-- directory in the child project. -->
      <resource>
        <directory>src/main/resources</directory>
        <targetPath>.</targetPath>
        <filtering>true</filtering>
        <includes>
          <include>**/tapis.version</include>
          <include>**/tapis.fullversion</include>
          <include>**/git.info</include>
          <include>**/build.time</include>
        </includes>
      </resource>

      <!-- For some reason, we have to tell maven, surefire or testng -->
      <!-- that all main/resources need to be copied to some target -->
      <!-- directory. We also have to tell them to NOT undo filtering -->
      <!-- for the files that we explicitly filter above. Good stuff. -->
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
        <includes>
          <include>**/*</include>
        </includes>
        <excludes>
          <exclude>**/tapis.version</exclude>
          <exclude>**/tapis.fullversion</exclude>
          <exclude>**/git.info</exclude>
          <exclude>**/build.time</exclude>
        </excludes>
      </resource>
    </resources>
  </build>
  
  <!-- Global Dependencies -->
  <!--                     -->
  <!-- Only add dependencies here that are used by EVERY submodule. -->
  <dependencies>
    <dependency>
    <!-- There are only test dependencies on testng -->
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
    </dependency>
  </dependencies>

  <modules>
    <module>api</module>
    <module>lib</module>
  </modules>

</project>
